#
#
# datecreated 08-12-04
# FIELDS
# parentid 256 possible parents for Menus
# menuId 65535 possible Menus primary key
# name 128 max characters
# description max 2^16 characters
# position = in what order the menu item will show up
# Created INDEX inorder to make faster searches for the rows with parentId
#
#

DROP TABLE IF EXISTS Menus;
CREATE TABLE Menus (
  parentId tinyint unsigned NOT NULL default '0',	
  menuId smallint unsigned NOT NULL auto_increment,
  name varchar(128) NOT NULL default 'NO M_NAME',
  description text default '',
  position int unsigned  NOT NULL default 0,
  PRIMARY KEY  (menuId),
  INDEX children (parentId)
) TYPE=MyISAM AUTO_INCREMENT=1;

# --------------------------------------------------------
INSERT INTO Menus (parentId,menuId,name,description,position) VALUES (0,1,'Nigiri Sushi','2pcs per order',0);
INSERT INTO Menus (parentId,menuId,name,description,position) VALUES (1,2,'Roll Sushi','',1);
INSERT INTO Menus (name,description,position) VALUES ();
INSERT INTO Menus (menuId,name,description,position) VALUES (4,'Beverages & Sake',100);
INSERT INTO Menus (parentId,name,description,position) VALUES (5,'House Specialties','',0);
# --------------------------------------------------------

##############################################################################################################################
##############################################################################################################################

#
#
# datecreated 08-15-04
# FIELDS
# productId 1,677,215 possible positive Products
# menuId 65535 possible
# name 128 maximum characters
# description max 2^16 characters
# price 999999999999999.99 max 0 for price means that the price varies depending on the market
# status 0 means that it is not available/or check for availability 1 means that it is available
# taxId, ( I dont think we need to have a tax Id here, because it will be same for everything, see tax table)
# optionId smallint unsigned NOT NULL default '0', (Dont need the optionId here we got a separate table for this)
# INDEX menuId is for fast searches, It also guaranties that each product
# will be belong to a single menu, if this is not the case a ProductsToMenu
# table has to be created
#
#

DROP TABLE IF EXISTS Products;
CREATE TABLE Products (
  productId mediumint unsigned NOT NULL auto_increment,
  menuId smallint unsigned NOT NULL,
  name varchar(16) NOT NULL default 'NO P_NAME',
  description text default '',
  price decimal(15,2) NOT NULL,
  status bool NOT NULL,
  PRIMARY KEY (productId),
  INDEX  menuSearch (menuId)
) TYPE=MyISAM AUTO_INCREMENT=1;

#Nigiri Sushi Menu
# --------------------------------------------------------
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (1,1,'Maguro','Tuna','4.25',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (2,1,'Maguro Tataki','Seared Tuna','4.25',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (3,1,'Shiro Maguro','Abacore Tuna','3.80',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (4,1,'Chu Toro','Medium Fatty Tuna','0.00',0);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (5,1,'Oh Toro','Fattiest Tuna','0.00',0);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (6,1,'Hamachi','Yellowtail','4.50',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (7,1,'Shake','Salmon','3.90',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (8,1,'Shiromi-Tai','Red Snapper','4.35',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (9,1,'Shiromi-Hiame','Halibut','4.35',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (10,1,'Shiromi-Suzuki','Striped Bass','3.80',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (11,1,'Ebi','Shrimp','3.80',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (12,1,'Amaebi','Sweet Raw Shrimp','4.75',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (13,1,'Saba','Mackerel','3.80',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (14,1,'Aji','SpanishMackerel','4.85',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (15,1,'Kaibashira','Scallops','4.25',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (16,1,'Mirugai','Jumbo Clam','6.50',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (17,1,'Hokki Gai','Surg Clam','3.75',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (18,1,'Kaki','Oyster','4.50',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (19,1,'Awabi','Abalone','6.50',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (20,1,'Tako','Octopus','3.90',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (21,1,'Ika','Squid','3.95',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (22,1,'Anago','Sea Eel','4.40',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (23,1,'Unagi','Freshwater Eel','4.40',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (24,1,'Tamago','Egg Custard','3.50',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (25,1,'Ikura','Salmon Egg','4.75',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (26,1,'Masago','Smelt Egg','3.75',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (27,1,'Tobiko','Flying fish Egg','4.50',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (28,1,'Uni','Sea Urchin','6.25',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (29,1,'Kani','Snow Crab Legs','5.75',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (30,1,'Katsuo','Seared Bonito','4.00',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (31,1,'Smoked Salmon','Smoked Salmon','4.25',1);
INSERT INTO Products (productId,menuId,name,description,price,status) VALUES (32,1,'Uzura','Quail Egg - 2pcs','1.30',1);

#C 1 California (California Rolls - 8pcs) $4.75
#M 2 Salmon & Cr.  Cheese (Philadelphia - 8pcs) $5.00
#3  Tekka Maki (Tuna Roll - 6pcs) $4.50
#4  Negihama (Yellowtail Roll - 6pcs) $4.50
#5  Negitoro (Fatty Tuna/Green Onion - 6pcs) Mkt.
#C 6 Anakyu (Sea Eel Roll - 5pcs) $5.00
#C 7  (Salmon Skin Roll - 5 pcs) $4.25
#C 8 Unakyu (Freshwater Eel Roll - 5pcs) $5.00
#9 Kaibashira (Scallop Roll - 6pcs) $4.75
#C 10 Caterpillar Roll (Avocado/Freshwater Eel - 8pcs) $8.95
#11 Rainbow Roll (7 Dif. Fish - 8pcs) $12.95
#C 12 Futomaki (Sea Eel/Egg Custard/Shitake/etc. - 5pcs) $5.95
#M 13 Shake Maki (Salmon Roll - 6pcs) $4.00
# --------------------------------------------------------


#
#
# options table will have values such as extra fries, extra ginger
# datecreated 08-12-04
# FIELDS
# optionId maximum 65535 options for a particular restaurant
# name max 64 chars
# description max 255 characters
# price for extras
#
#

DROP TABLE IF EXISTS ProductOptions;
CREATE TABLE ProductOptions (
  optionId smallint unsigned NOT NULL default '0',
  name varchar(64) NOT NULL default '',
  description tinytext default '',
  price decimal(15,2) NOT NULL,
  PRIMARY KEY  (optionId)
) TYPE=MyISAM AUTO_INCREMENT=1; 

# --------------------------------------------------------
INSERT INTO ProductOptions (optionId,description,name,price) VALUES (1,'Cooked','C','0');
INSERT INTO ProductOptions (optionId,description,name,price) VALUES (2,'Marinated','M','0');
INSERT INTO ProductOptions (optionId,description,name,price) VALUES (3,'Seared','S','0');
INSERT INTO ProductOptions (optionId,description,name,price) VALUES (4,'Vegetables','V','0');
# --------------------------------------------------------


#
#
# Below table is created for the possibility of having multiple
# options per product, otherwise optionId would have put in the
# product table
# datecreated 08-12-04
# FIELDS
# productId 1,677,215 possible Products
# optionId
#
#

DROP TABLE IF EXISTS ProductsToOptions;
CREATE TABLE ProductsToOptions (
  productId mediumint unsigned NOT NULL,
  optionId smallint unsigned NOT NULL,
  PRIMARY KEY (productId,optionId)
) TYPE=MyISAM;

# --------------------------------------------------------
INSERT INTO ProductsToOptions (productId,optionId) VALUES (2,3);
INSERT INTO ProductsToOptions (productId,optionId) VALUES (3,3);
INSERT INTO ProductsToOptions (productId,optionId) VALUES (7,2);
INSERT INTO ProductsToOptions (productId,optionId) VALUES (11,1);
INSERT INTO ProductsToOptions (productId,optionId) VALUES (13,2);
INSERT INTO ProductsToOptions (productId,optionId) VALUES (17,1);
INSERT INTO ProductsToOptions (productId,optionId) VALUES (20,1);
INSERT INTO ProductsToOptions (productId,optionId) VALUES (22,1);
INSERT INTO ProductsToOptions (productId,optionId) VALUES (23,1);
INSERT INTO ProductsToOptions (productId,optionId) VALUES (24,1);
INSERT INTO ProductsToOptions (productId,optionId) VALUES (29,1);
INSERT INTO ProductsToOptions (productId,optionId) VALUES (31,1);
# --------------------------------------------------------


##############################################################################################################################
##############################################################################################################################

#
#
# Tax table
# datecreated 08-15-04
# FIELDS
# TaxId 256 positive possible types of Tax
# taxZone 128 possible characters for the tax Zone 
# description 255 possible chars for the description
# 
#

DROP TABLE IF EXISTS Tax;
CREATE TABLE Tax (
  taxId tinyint unsigned NOT NULL auto_increment,
  taxZone varchar(128),
  rate decimal(3,2) NOT NULL,
  description tinytext,
  PRIMARY KEY (taxId)
) TYPE=MyISAM AUTO_INCREMENT=1;

# --------------------------------------------------------
INSERT INTO Tax (taxId,taxZone,rate,description) VALUES (1,'Denver',7.7,'Total tax rate for Denver Restaurants');
# --------------------------------------------------------


##############################################################################################################################
##############################################################################################################################


#
#
# Orders table
# datecreated 08-26-04
# FIELDS
# orderId maximum 4294967295 Orders per period (daily/monthly/yearly) of order information
# serverId max 256 servers
# paymentMethodId max 256 payment Methods
# orderDate DATETIME format is in 2004-08-17 15:48:34
#
# INDEX dateIndex will be used to get Orders between dateStart and dateEnd
#
#

DROP TABLE IF EXISTS Orders;
CREATE TABLE Orders (
  orderId int unsigned NOT NULL auto_increment,
  tableNo smallint unsigned,
  numberOfGuests smallint unsigned,
  orderDate datetime NOT NULL,
  subTotal decimal (15,2) NOT NULL,
  taxAmount decimal (7,2) NOT NULL,
  tipAmount decimal (7,2) NOT NULL,	
  total decimal (15,2) NOT NULL,
  balanceDue decimal (15,2) NOT NULL,
  changeDue decimal (15,2) NOT NULL,
  PRIMARY KEY (orderId),
  INDEX dateIndex(orderDate)
) TYPE=MyISAM AUTO_INCREMENT=1;

#-----------------------------------
INSERT INTO Orders (orderId,paymentMethodId,serverId,orderDate) VALUES (1,1,1,now());
#-----------------------------------

#
#
# orderToProducts table
# datecreated 08-17-04
# FIELDS
# orderId maximum 4,294,967,295 Orders per period (daily/monthly/yearly) of order information
# productId maximum 1,677,215 possible Products
# productQuantity maximum 65535 same product sale per order
#
#

DROP TABLE IF EXISTS OrderToProducts;
CREATE TABLE OrderToProducts (
  orderId int unsigned NOT NULL,
  productId mediumint unsigned NOT NULL,
  productQuantity unsigned smallint NOT NULL,
  PRIMARY KEY (orderId)
);


##
##  Think on this one. I wonder if it would make date based searches faster.
##  I don't' think this table is necessary because date is indexed in order table
##  for date based fast search results
##  DROP TABLE IF EXISTS OrderedProducts;
##  CREATE TABLE OrderedProducts (
##  orderId
##  productId
##  dateOrdered	
##  );
##
##############################################################################################################################
##############################################################################################################################

#
#
# PaymentMethods table
# datecreated 08-17-04
# FIELDS
# paymentMethodId 256 maximum payment methods
# name 255 max characters Name of the server
# methodInitialCost any initial cost of taking that payment: some credit companies charge initial .25 dollar per order
# methodPercentageCost any percentage cost of taking that payment: Some credit companies charge 2% percent of product
#
#

DROP TABLE IF EXISTS PaymentMethods;
CREATE TABLE PaymentMethods (
  paymentMethId tinyint unsigned NOT NULL auto_increment,
  name tinytext NOT NULL,
  methodInitialCost int NOT NULL default 0,
  methodPercentageCost decimal(3,2) NOT NULL default '00.00',
  PRIMARY KEY (paymentMethodId)
) TYPE=MyISAM AUTO_INCREMENT=1;

INSERT INTO PaymentMethods (paymentMethodId,name) VALUES (1,'Cash');


DROP TABLE IF EXISTS PaymentMethsToOrders;
CREATE TABLE PaymentMethsToOrder (
  paymentMethId tinyint unsigned NOT NULL,
  orderId int unsigned NOT NULL,
  PRIMARY KEY (paymentMethodId,orderId),
  INDEX orderIndex (orderId),
) TYPE=MyISAM;


##############################################################################################################################
##############################################################################################################################


#
#
# Servers table
# datecreated 08-17-04
# FIELDS
# serverId 256 maximum Servers per restaurant's' payroll 
# name 255 max characters Name of the server
# address 255 max characters address of the server
# phoneNo 255 max characters phone number of the server
# contactPerson 255 max characters contact information of the server
#
# TODO: How to find efficiency of a server (order per server type of deal)
# Answer: Join Orders table and Servers table with serverId
#
#

DROP TABLE IF EXISTS Servers;
CREATE TABLE Servers (
  serverId tinyint unsigned NOT NULL auto_increment,
  name tinytext,
  address tinytext,
  phoneNo tinytext,
  contactPerson tinytext,
  PRIMARY KEY (serverId)
); TYPE=MyISAM AUTO_INCREMENT=1;


#
# Make sure to examine performance of this table for finding what server has open Orders.
#
 
DROP TABLE IF EXISTS ServersToOrders;
CREATE TABLE ServersToOrders (
  serverId tinyint unsigned NOT NULL,
  orderId int unsigned NOT NULL,
  closed bool NOT NULL,
  PRIMARY KEY (serverId,orderId),
  INDEX checkClosed (closed),
  INDEX orderIndex (orderId)
) TYPE=MyISAM;

INSERT INTO ServersToOrders (serverId,orderId,closed) VALUES (1,1,0);
INSERT INTO ServersToOrders (serverId,orderId,closed) VALUES (1,2,1);
INSERT INTO ServersToOrders (serverId,orderId,closed) VALUES (1,3,0);
INSERT INTO ServersToOrders (serverId,orderId,closed) VALUES (1,4,1);
INSERT INTO ServersToOrders (serverId,orderId,closed) VALUES (1,5,1);
INSERT INTO ServersToOrders (serverId,orderId,closed) VALUES (1,6,1);
INSERT INTO ServersToOrders (serverId,orderId,closed) VALUES (1,7,1);
INSERT INTO ServersToOrders (serverId,orderId,closed) VALUES (1,8,1);
INSERT INTO ServersToOrders (serverId,orderId,closed) VALUES (1,9,1);
INSERT INTO ServersToOrders (serverId,orderId,closed) VALUES (1,10,1);

##############################################################################################################################
##############################################################################################################################

DROP TABLE IF EXISTS GiftCertificate;
CREATE TABLE GiftCertificate (
  giftCertId smallint unsigned NOT NULL auto_increment,
  name tinytext NOT NULL default'',
  description tinytext NOT NULL default'',
  PRIMARY KEY (serverId)
); TYPE=MyISAM AUTO_INCREMENT=1;

DROP TABLE IF EXISTS OrderToGiftCertificate;
CREATE TABLE OrderToGiftCertificate (
  orderId int unsigned NOT NULL,
  giftCertId smallint unsigned NOT NULL,
  giftCertAmount decimal(15,2) NOT NULL,
  PRIMARY KEY (orderId)
); TYPE=MyISAM AUTO_INCREMENT=1;

##############################################################################################################################
##############################################################################################################################

DROP TABLE IF EXISTS Store;
CREATE TABLE Store (
  storeId smallint unsigned NOT NULL auto_increment,
  name tinytext NOT NULL,
  address tinytext NOT NULL,
  city tinytext NOT NULL,
  state varchar(2),
  zip varchar(32),
  telephone varchar(32)
  PRIMARY KEY (storeId)	
); TYPE=MyISAM AUTO_INCREMENT=1;

